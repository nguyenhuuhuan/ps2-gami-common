// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	makerchecker "gitlab.id.vin/gami/ps2-gami-common/adapters/makerchecker"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// CreateRequest provides a mock function with given fields: request
func (_m *Adapter) CreateRequest(request *makerchecker.MakerRequest) (*makerchecker.MakerResponse, error) {
	ret := _m.Called(request)

	var r0 *makerchecker.MakerResponse
	if rf, ok := ret.Get(0).(func(*makerchecker.MakerRequest) *makerchecker.MakerResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*makerchecker.MakerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*makerchecker.MakerRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
