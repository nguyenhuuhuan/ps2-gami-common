// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	admin_service "gitlab.id.vin/gami/gami-common/adapters/admin_service"
)

// AdminServiceAdapter is an autogenerated mock type for the AdminServiceAdapter type
type AdminServiceAdapter struct {
	mock.Mock
}

// AdminServiceRequest provides a mock function with given fields: request
func (_m *AdminServiceAdapter) AdminServiceRequest(request *admin_service.AdminServiceRequest) (*admin_service.AdminServiceResponse, error) {
	ret := _m.Called(request)

	var r0 *admin_service.AdminServiceResponse
	if rf, ok := ret.Get(0).(func(*admin_service.AdminServiceRequest) *admin_service.AdminServiceResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin_service.AdminServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*admin_service.AdminServiceRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminServiceAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminServiceAdapter creates a new instance of AdminServiceAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminServiceAdapter(t mockConstructorTestingTNewAdminServiceAdapter) *AdminServiceAdapter {
	mock := &AdminServiceAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
