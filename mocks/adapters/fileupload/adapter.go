// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// GetURL provides a mock function with given fields: url
func (_m *Adapter) GetURL(url string) (string, error) {
	ret := _m.Called(url)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: uploadFile, uploadFileType, folderName
func (_m *Adapter) Upload(uploadFile io.Reader, uploadFileType string, folderName string) (string, error) {
	ret := _m.Called(uploadFile, uploadFileType, folderName)

	var r0 string
	if rf, ok := ret.Get(0).(func(io.Reader, string, string) string); ok {
		r0 = rf(uploadFile, uploadFileType, folderName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, string, string) error); ok {
		r1 = rf(uploadFile, uploadFileType, folderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadWithName provides a mock function with given fields: uploadFile, uploadFileType, folderName, fileName
func (_m *Adapter) UploadWithName(uploadFile io.Reader, uploadFileType string, folderName string, fileName string) (string, error) {
	ret := _m.Called(uploadFile, uploadFileType, folderName, fileName)

	var r0 string
	if rf, ok := ret.Get(0).(func(io.Reader, string, string, string) string); ok {
		r0 = rf(uploadFile, uploadFileType, folderName, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, string, string, string) error); ok {
		r1 = rf(uploadFile, uploadFileType, folderName, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
