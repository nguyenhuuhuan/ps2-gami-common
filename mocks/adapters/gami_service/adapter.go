// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gami_service "gitlab.id.vin/gami/gami-common/adapters/gami_service"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// AcceptChallenge provides a mock function with given fields: ctx, req
func (_m *Adapter) AcceptChallenge(ctx context.Context, req gami_service.AcceptChallengeRequest) (*gami_service.AcceptChallengeResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.AcceptChallengeResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.AcceptChallengeRequest) *gami_service.AcceptChallengeResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.AcceptChallengeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.AcceptChallengeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlackWhiteList provides a mock function with given fields: ctx, campaignID
func (_m *Adapter) GetBlackWhiteList(ctx context.Context, campaignID int64) (*gami_service.GetBlackWhiteListResponse, error) {
	ret := _m.Called(ctx, campaignID)

	var r0 *gami_service.GetBlackWhiteListResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *gami_service.GetBlackWhiteListResponse); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetBlackWhiteListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignByCode provides a mock function with given fields: ctx, code, userID
func (_m *Adapter) GetCampaignByCode(ctx context.Context, code string, userID int64) (*gami_service.GetCampaignResponse, error) {
	ret := _m.Called(ctx, code, userID)

	var r0 *gami_service.GetCampaignResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *gami_service.GetCampaignResponse); ok {
		r0 = rf(ctx, code, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetCampaignResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, code, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignByID provides a mock function with given fields: ctx, id
func (_m *Adapter) GetCampaignByID(ctx context.Context, id int64) (*gami_service.GetCampaignResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *gami_service.GetCampaignResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *gami_service.GetCampaignResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetCampaignResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignByUser provides a mock function with given fields: ctx, id, userID
func (_m *Adapter) GetCampaignByUser(ctx context.Context, id int64, userID int64) (*gami_service.GetCampaignResponse, error) {
	ret := _m.Called(ctx, id, userID)

	var r0 *gami_service.GetCampaignResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *gami_service.GetCampaignResponse); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetCampaignResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignByUserV2 provides a mock function with given fields: ctx, id, userID
func (_m *Adapter) GetCampaignByUserV2(ctx context.Context, id int64, userID int64) (*gami_service.GetCampaignResponse, error) {
	ret := _m.Called(ctx, id, userID)

	var r0 *gami_service.GetCampaignResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *gami_service.GetCampaignResponse); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetCampaignResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListCampaignByIDs provides a mock function with given fields: ctx, req
func (_m *Adapter) GetListCampaignByIDs(ctx context.Context, req gami_service.GetListCampaignByIDsRequest) (*gami_service.ListCampaignsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.ListCampaignsResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.GetListCampaignByIDsRequest) *gami_service.ListCampaignsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.ListCampaignsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.GetListCampaignByIDsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListRewardByIDs provides a mock function with given fields: ctx, req
func (_m *Adapter) GetListRewardByIDs(ctx context.Context, req gami_service.GetListRewardByIDsRequest) (*gami_service.ListRewardResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.ListRewardResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.GetListRewardByIDsRequest) *gami_service.ListRewardResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.ListRewardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.GetListRewardByIDsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardAmountInCampaign provides a mock function with given fields: ctx, req
func (_m *Adapter) GetRewardAmountInCampaign(ctx context.Context, req gami_service.RewardAmountStatisticRequest) (*gami_service.RewardAmountStatisticResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.RewardAmountStatisticResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.RewardAmountStatisticRequest) *gami_service.RewardAmountStatisticResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.RewardAmountStatisticResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.RewardAmountStatisticRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardByCampaignID provides a mock function with given fields: ctx, campaignID
func (_m *Adapter) GetRewardByCampaignID(ctx context.Context, campaignID int64) (*gami_service.GetRewardPoolResponse, error) {
	ret := _m.Called(ctx, campaignID)

	var r0 *gami_service.GetRewardPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *gami_service.GetRewardPoolResponse); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetRewardPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardByID provides a mock function with given fields: ctx, ID
func (_m *Adapter) GetRewardByID(ctx context.Context, ID int64) (*gami_service.GetRewardResponse, error) {
	ret := _m.Called(ctx, ID)

	var r0 *gami_service.GetRewardResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *gami_service.GetRewardResponse); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetRewardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardsByCampaignID provides a mock function with given fields: ctx, req
func (_m *Adapter) GetRewardsByCampaignID(ctx context.Context, req gami_service.GetRewardsByCampaignIDRequest) (*gami_service.GetRewardsByCampaignIDResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.GetRewardsByCampaignIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.GetRewardsByCampaignIDRequest) *gami_service.GetRewardsByCampaignIDResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetRewardsByCampaignIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.GetRewardsByCampaignIDRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleByCampaign provides a mock function with given fields: ctx, campaignID
func (_m *Adapter) GetRuleByCampaign(ctx context.Context, campaignID int64) (*gami_service.GetRulesResponse, error) {
	ret := _m.Called(ctx, campaignID)

	var r0 *gami_service.GetRulesResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *gami_service.GetRulesResponse); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.GetRulesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, request
func (_m *Adapter) GetTransaction(ctx context.Context, request *gami_service.TransactionRequest) (*gami_service.TransactionResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *gami_service.TransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gami_service.TransactionRequest) *gami_service.TransactionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gami_service.TransactionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCampaigns provides a mock function with given fields: ctx, req
func (_m *Adapter) ListCampaigns(ctx context.Context, req gami_service.ListCampaignsRequest) (*gami_service.ListCampaignsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.ListCampaignsResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.ListCampaignsRequest) *gami_service.ListCampaignsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.ListCampaignsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.ListCampaignsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaintenanceStatusCampaign provides a mock function with given fields: ctx, req
func (_m *Adapter) MaintenanceStatusCampaign(ctx context.Context, req gami_service.MaintenanceStatusCampaignRequest) (*gami_service.MaintenanceStatusCampaignResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *gami_service.MaintenanceStatusCampaignResponse
	if rf, ok := ret.Get(0).(func(context.Context, gami_service.MaintenanceStatusCampaignRequest) *gami_service.MaintenanceStatusCampaignResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.MaintenanceStatusCampaignResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gami_service.MaintenanceStatusCampaignRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Redeem provides a mock function with given fields: ctx, request
func (_m *Adapter) Redeem(ctx context.Context, request *gami_service.RedeemRequest) (*gami_service.RedeemResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *gami_service.RedeemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gami_service.RedeemRequest) *gami_service.RedeemResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gami_service.RedeemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gami_service.RedeemRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
