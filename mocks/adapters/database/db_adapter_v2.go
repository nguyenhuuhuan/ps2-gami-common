// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	database "gitlab.id.vin/gami/gami-common/adapters/database"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DBAdapterV2 is an autogenerated mock type for the DBAdapterV2 type
type DBAdapterV2 struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *DBAdapterV2) Begin() database.DBAdapterV2 {
	ret := _m.Called()

	var r0 database.DBAdapterV2
	if rf, ok := ret.Get(0).(func() database.DBAdapterV2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.DBAdapterV2)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *DBAdapterV2) Close() {
	_m.Called()
}

// Commit provides a mock function with given fields:
func (_m *DBAdapterV2) Commit() {
	_m.Called()
}

// DB provides a mock function with given fields:
func (_m *DBAdapterV2) DB() (*sql.DB, error) {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gormer provides a mock function with given fields:
func (_m *DBAdapterV2) Gormer() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Open provides a mock function with given fields: connectionString, config
func (_m *DBAdapterV2) Open(connectionString string, config gorm.Config) error {
	ret := _m.Called(connectionString, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gorm.Config) error); ok {
		r0 = rf(connectionString, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSalve provides a mock function with given fields: connectionString
func (_m *DBAdapterV2) OpenSalve(connectionString string) error {
	ret := _m.Called(connectionString)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(connectionString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackUselessCommitted provides a mock function with given fields:
func (_m *DBAdapterV2) RollbackUselessCommitted() {
	_m.Called()
}

type mockConstructorTestingTNewDBAdapterV2 interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBAdapterV2 creates a new instance of DBAdapterV2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBAdapterV2(t mockConstructorTestingTNewDBAdapterV2) *DBAdapterV2 {
	mock := &DBAdapterV2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
